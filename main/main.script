
go.property("rive_buffer0", resource.buffer("/assets/buffers/rive0.buffer"))
go.property("rive_buffer1", resource.buffer("/assets/buffers/rive1.buffer"))
go.property("rive_buffer2", resource.buffer("/assets/buffers/rive2.buffer"))
go.property("rive_buffer3", resource.buffer("/assets/buffers/rive3.buffer"))
go.property("rive_buffer4", resource.buffer("/assets/buffers/rive4.buffer"))
go.property("rive_buffer5", resource.buffer("/assets/buffers/rive5.buffer"))
go.property("rive_buffer6", resource.buffer("/assets/buffers/rive6.buffer"))
go.property("rive_buffer7", resource.buffer("/assets/buffers/rive7.buffer"))
go.property("rive_buffer8", resource.buffer("/assets/buffers/rive8.buffer"))
go.property("rive_buffer9", resource.buffer("/assets/buffers/rive9.buffer"))
go.property("rive_buffer10", resource.buffer("/assets/buffers/rive10.buffer"))
go.property("rive_buffer11", resource.buffer("/assets/buffers/rive11.buffer"))
go.property("rive_buffer12", resource.buffer("/assets/buffers/rive12.buffer"))
go.property("rive_buffer13", resource.buffer("/assets/buffers/rive13.buffer"))
go.property("rive_buffer14", resource.buffer("/assets/buffers/rive14.buffer"))
go.property("rive_buffer15", resource.buffer("/assets/buffers/rive15.buffer"))
go.property("rive_buffer16", resource.buffer("/assets/buffers/rive16.buffer"))
go.property("rive_buffer17", resource.buffer("/assets/buffers/rive17.buffer"))
go.property("rive_buffer18", resource.buffer("/assets/buffers/rive18.buffer"))
go.property("rive_buffer19", resource.buffer("/assets/buffers/rive19.buffer"))
go.property("rive_buffer20", resource.buffer("/assets/buffers/rive20.buffer"))
go.property("rive_buffer21", resource.buffer("/assets/buffers/rive21.buffer"))
go.property("rive_buffer22", resource.buffer("/assets/buffers/rive22.buffer"))
go.property("rive_buffer23", resource.buffer("/assets/buffers/rive23.buffer"))
go.property("rive_buffer24", resource.buffer("/assets/buffers/rive24.buffer"))

local buffer_pool =
{
    free = {},
    push = function(self, b) table.insert(self.free, b) end,
    pop = function(self) return table.remove(self.free, 1) end,
    empty = function(self) return #self.free == 0 end
}

function init(self)
    self.rive_init = rive.init(sys.load_resource("/assets/riv/control.riv"))

    if not self.rive_init then
        print("Rive couldn't be initialized")
    end
   
    self.paths = {}
    self.gameobjects = {}

    for i=0,18 do
        buffer_pool:push(self["rive_buffer" .. i])
    end
end

local function get_object(self, id)
    if not self.gameobjects[id] then
        self.gameobjects[id] = { go = factory.create("#factory"), buffer = buffer_pool:pop() }
    end

    return self.gameobjects[id]
end

local function handle_paint(self, cmd, obj)
    local paint     = cmd.paint
    local num_stops = 0

    local function set_gradient(ix, data)
        local v = vmath.vector4(data[1],data[2],data[3],data[4])
        go.set(obj, "uGradientStop" .. ix, v)
    end

    if paint.type == rive.FILL_TYPE_SOLID then
        local c  = vmath.vector4(paint.color[1], paint.color[2], paint.color[3], paint.color[4])
        go.set(obj, "uSolidColor", c)
    else
        num_stops = #paint.stops
        go.set(obj, "uGradientLimits", vmath.vector4(paint.limits[1], paint.limits[2], paint.limits[3], paint.limits[4]))

        for k,v in pairs(paint.colors) do
            go.set(obj, "uGradientColor" .. (k-1), vmath.vector4(v[1], v[2], v[3], v[4]))
        end

        local stop_buffer = nil
        local stop_buffer_count = 0

        for k,v in pairs(paint.stops) do
            local ix = math.mod(k-1, 4)
            if ix == 0 then

                if stop_buffer then
                    set_gradient(stop_buffer_count-1, stop_buffer)
                end

                stop_buffer_count = stop_buffer_count + 1
                stop_buffer = {0,0,0,0}
            end
            stop_buffer[ix + 1] = v
        end
        set_gradient(stop_buffer_count-1, stop_buffer)
    end

    go.set(obj, "uFillData", vmath.vector4(paint.type, num_stops, 0, 0))
end

local function handle_commands(self, cmds)
    if cmds == nil then
        print("No commands")
        return
    end
    
    local buffer_uploads = {}
    for k,v in pairs(cmds) do  
        if v.cmd == rive.CMD_DRAW_PATH then
            local rive_obj  = get_object(self, v.id)
            local rive_go   = rive_obj.go
            local rive_buf  = rive_obj.buffer
            local rive_path = rive.get_path(v.id)
            local rive_mesh = msg.url(nil, rive_go, "mesh")

            local p = vmath.vector3(rive_path.position[1], rive_path.position[2], rive_path.draw_index * 0.01)
            local s = vmath.vector3(rive_path.scale[1], rive_path.scale[2], 1)
            local r = vmath.quat_rotation_z(rive_path.rotation)

            go.set_position(p, rive_go)
            go.set_scale(s, rive_go)
            go.set_rotation(r, rive_go)

            handle_paint(self, v, rive_mesh)

        elseif v.cmd == rive.CMD_UPDATE_TESSELATION then
            table.insert(buffer_uploads, v)
        end
    end

    for k, v in pairs(buffer_uploads) do
        local rive_obj  = get_object(self, v.id)
        local rive_go   = rive_obj.go
        local rive_buf  = rive_obj.buffer
        local rive_path = rive.get_path(v.id)
        local rive_mesh = msg.url(nil, rive_go, "mesh")
        if rive_buf then
            go.set(rive_mesh, "vertices", rive_buf)
            resource.set_buffer(rive_buf, rive_path.buffer)
        end
    end
end

function update(self, dt)
    local window_width, window_height = window.get_size()
    local rive_cmds                   = rive.draw_frame(dt, window_width, window_height)
    handle_commands(self, rive_cmds)
    -- msg.post ("@render:", "on_rive_update", rive_cmds)
end