
function init(self)
	rive.init("/Users/jhonny/dev/defold-rive-test/assets/new_file.riv")
	self.paths = {}
	self.frame = 0
end

local function get_mesh_go(self, id)
	if self.paths[id] == nil then
		self.paths[id] = factory.create("#factory")
	end
	return self.paths[id]
end

local function get_mesh_res(self, id)
	local mesh_url = msg.url(nil, self.paths[id], "mesh")
	return go.get(mesh_url, "vertices")
end

local function handle_commands(self, rive_cmds)
	-- temp, remove later
	if self.uploaded_once then
		return
	end

	for _,v in pairs(rive_cmds) do
		if _ == 4 and v.cmd == rive.CMD_UPDATE_TESSELATION then
			local mesh_go  = get_mesh_go(self, v.id)
			local mesh_res = get_mesh_res(self, v.id)
			local path     = rive.get_path(v.id)

			local p = vmath.vector3(path.position[1], path.position[2], 0)
			go.set_position(p, mesh_go)

			resource.set_buffer(mesh_res, path.buffer)
		end
	end

	self.uploaded_once = true
end

function update(self, dt)
	self.frame = self.frame + 1

	--print("Frame " .. self.frame)
	local rive_cmds = rive.draw_frame()
	handle_commands(self, rive_cmds)

	msg.post ("@render:", "on_rive_update", rive_cmds)
end
